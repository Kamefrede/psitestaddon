buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url "https://maven.tterrag.com/"
        }
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.4.0'
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.27.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'pmd'
apply plugin: 'kotlin'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "psideas.refmap.json"
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

def mc_version = "1.16.2"
version = "${config.mod_version}"
group = "xyz.kamefrede.${config.mod_name}"
archivesBaseName = config.mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

minecraft {
    mappings channel: "snapshot", version: "20200801-mixed-1.16.1"
    accessTransformer = file('src/main/resources/META-INF/rps_at.cfg')

    runs {
        client {
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            mods {
                psideas {
                    source sourceSets.main
                }
            }
            args    '--username', '"' + config.mc_username + '"',
                    '--uuid', '"' + config.mc_uuid + '"'
        }
        server {
            properties 'forge.logging.console.level': 'debug'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            mods {
                psideas {
                    source sourceSets.main
                }
            }
        }
        data {
            properties 'fml.earlyprogresswindow': 'false'
            properties 'mixin.env.disableRefMap': 'true'
            workingDirectory project.file('run')
            forceExit false
            mods {
                psideas {
                    source sourceSets.main
                }
            }
            args '--mod', 'psideas', '--all',
                    '--existing', '"' + file('src/main/resources/') + '"',
                    '--existing', '"' + file('src/generated/resources/') + '"',
                    '--output', '"' + file('src/generated/resources/') + '"'
        }
    }
}

repositories {
    maven {
        name "vazkiismods"
        url "http://maven.blamejared.com/"
    }
    maven {
        name "curiosncaelus"
        url "https://maven.theillusivec4.top/"
    }
    maven {
        name "jei"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "yarn2mcp"
        url "https://maven.tterrag.com"
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${mc_version}-33.0.5"

    annotationProcessor 'org.spongepowered:mixin:0.8'
    annotationProcessor 'com.google.code.gson:gson:2.8.0'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:7.2'
    annotationProcessor 'org.ow2.asm:asm-commons:7.2'
    annotationProcessor 'org.ow2.asm:asm-util:7.2'

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16-40:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16-40")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.2-4.0.0.0:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.2-4.0.0.0")

    compileOnly fg.deobf("vazkii.psi:Psi:1.16-84.255")
    runtimeOnly fg.deobf("vazkii.psi:Psi:1.16-84.255")

    compileOnly fg.deobf("vazkii.botania:Botania:1.16.1-404-SNAPSHOT:api")
    runtimeOnly fg.deobf("vazkii.botania:Botania:1.16.1-404-SNAPSHOT")

    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus:FORGE-1.16.1-2.0-beta7")
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus:FORGE-1.16.1-2.0-beta7")

    compileOnly fg.deobf("mezz.jei:jei-1.16.2:7.1.0.11:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:7.1.0.11")

}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    // we explicitly check in github actions builds
    java {
        indentWithTabs()
        licenseHeaderFile( 'spotless/license_template.txt')
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
    }
}

pmd {
    toolVersion '6.22.0'
    incrementalAnalysis.set(true)
    ruleSets.clear()
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}


task checkSyntax {
    dependsOn spotlessJavaCheck, pmdMain
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

sourceSets {
    main {
        java {
            srcDirs += "EvalEx/src/main/java"
        }
    }
}

idea {
    module {
        excludeDirs += [file("run"), file("out"), file("gradle"), file(".idea")]
        generatedSourceDirs += file("EvalEx/src/main/java")
    }

    if (it.project != null)
        project {
            jdkName = '1.8'
            languageLevel = '1.8'
        }
}

tasks.withType(JavaCompile).all {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}


processResources {
    // replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', '**/psd/**'
    }
}

task srcJar(type: Jar) {
    from(sourceSets.main.java)
    classifier = 'sources'
}


artifacts {
    archives srcJar
}

def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}


jar {
    archiveName = "${baseName} ${version}.${extension}"

    manifest {
        attributes([
                "Specification-Title": "${config.mod_name}",
                "Specification-Vendor": "kamefrede",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "${config.mod_name}",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"kamefrede",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                //"MixinConnector": "xyz.kamefrede.rpsideas.common.MixinConnector"
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

defaultTasks 'clean', 'runData', 'checkSyntax', 'build'